#!/bin/bash
#
# smlrun - run a SML program defined in a SML or MLB file using SML/NJ
#
# Chris Cannam, 2015-2022. MIT licence

set -e

usage() {
    me=$(basename "$0")
    echo 1>&2
    echo "$me: Run a SML program defined in a MLB file using SML/NJ" 1>&2
    echo 1>&2
    echo "Usage: $me [-v] file.sml" 1>&2
    echo "       $me [-u] [-v] file.mlb" 1>&2
    echo "where" 1>&2
    echo "   -u: Unique: \"use\" each file only once, regardless of how many times it" 1>&2
    echo "       appears in the MLB file. See \"polybuild\" for discussion." 1>&2
    echo "   -v: Verbose: Do not suppress output from interactive environment." 1>&2
    echo 1>&2
    exit 2
}

if echo | sml | grep -q Jersey ; then :
else
    echo "*** Error: SML/NJ binary 'sml' not in path" 1>&2
    exit 1
fi

unique_arg=""
if [ "$1" = "-u" ]; then
    unique_arg="-u"
    shift
fi

verbose=no
if [ "$1" = "-v" ]; then
    verbose=yes
    shift
fi

arg="$1"

if [ -z "$arg" ]; then
    usage
fi

shift
set -u

mydir=$(dirname "$0")
. "$mydir/smlbuild-include.sh"

out=$(get_outfile "$arg")
tmpout=$(get_tmpsmlfile "$arg")

trap "rm -f ${tmpout}" 0

case "$verbose" in
    yes)
        expand_arg -u "$arg" | \
            sed 's/^\(.*\)$/use "\1";/' |       # wrap filenames in REPL use calls
            (
	        cat -
	        cat <<EOF
val _ = main ();
val _ = OS.Process.exit (OS.Process.success);
EOF
            ) > "$tmpout"

        sml "$tmpout" "$@"
        ;;

    no)
        expand_arg -u "$arg" | \
            sed 's/^\(.*\)$/use "\1";/' |       # wrap filenames in REPL use calls
            (
	        cat <<EOF
val smlrun__cp = 
    let val x = !Control.Print.out in
        Control.Print.out := { say = fn _ => (), flush = fn () => () };
        x
    end;
val smlrun__prev = ref "";
Control.Print.out := { 
    say = fn s => 
        (if String.isSubstring " Error" s orelse String.isSubstring "failed: " s
         then (Control.Print.out := smlrun__cp;
               (#say smlrun__cp) (!smlrun__prev);
               (#say smlrun__cp) s)
         else (smlrun__prev := s; ())),
    flush = fn s => ()
};
EOF
	        cat -
	        cat <<EOF

val _ = main ();
val _ = OS.Process.exit (OS.Process.success);
EOF
            ) > "$tmpout"

        CM_VERBOSE=false sml "$tmpout" "$@" | tail -n +3
        ;;
esac


